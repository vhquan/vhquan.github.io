#+TITLE: References in C++
#+DATE: <2023-10-14 Sat 21:00>
#+AUTHOR: devlift

When a variable is declared as a reference, it becomes an alternative namee
for an existing variable. A variable can be declared as a reference by putting
'&' in the declaration.

*Syntax*:
~data_type &ref = variable;~

* Limitations of References
1. Once a reference is created, it cannot be later made to reference another
   object; it cannot be reset. This is often done with pointers.
2. References cannot be NULL. Pointers are often made NULL to indicate that
   they are not pointing to any valid thing.
3. A reference must be initialized when declared. There is no such restriction
   with pointers.

Due to the above limitations, references in C++ cannot be used for
implementing data structures like Linked List, Tree, etc. 

* Advantages of using References
1. Safer: Since reference must be initialized, wild references like wild
   pointers are unlikely to exist. It is still possible to have references
   that don't refer to a valid location.
2. Easier to use: References don't need a dereferencing operator to access the
   value. They can be used like normal variables. The '&' operator is needed
   only at the time of declaration. Also, memebers of an object reference can
   be accessed with the dot operator ('.'), unlike pointers where the arrow
   operator (->) is needed to access members.
* When use?
Use references wherever you can, and pointers wherever you must.

A void pointers until you can't.

The reason is that pointers make things harder to follow/read, less safe and
far more dangerous manipulations than any other constructs.

So the rule of thumb is to use pointers only if there is no other choice.

For example, returning a pointer to an object is a valid option when the
function can return =nullptr= in some cases and it is assumed it will. That
said, a better option would be to use something similar to =std::optional=
(requires C++17; before that, there's =boost::optional=).

Another example is to use pointers to raw memory for specific memory
manipulations. That should be hidden and localized in very narrow parts of the
code, to help limit the dangerous parts of the whole code base.

If the behaviour of the function would have to work with or without a given
object, then using a pointer as an attribute suggests that you can pass
=nullptr= as the argument and it is fine for the function. That's kind of a
contract between the user and the implemention.

** References
[[https://www.geeksforgeeks.org/references-in-cpp/]]
[[https://stackoverflow.com/questions/7058339/when-should-i-use-pointers-instead-of-references-in-api-design]]
[[https://www.geeksforgeeks.org/why-do-we-need-reference-variables-if-we-have-pointers/]]
[[https://google.github.io/styleguide/cppguide.html]]
[[https://www.geeksforgeeks.org/pointers-vs-references-cpp/]]
