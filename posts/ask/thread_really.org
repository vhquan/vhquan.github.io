#+TITLE: What is a "thread" (really)?
#+AUTHOR: Quan Vu
#+DATE: <2023-09-03 CN 16:00>

I have been trying to find a good definition, and get understanding, of what a
/thread/ really is.

It seems that I must be missing something obvious, but every time I read about
what a thread is, it's almost a circular definition, a la "a thread is a
thread of execution" or "a way to divide into running tasks". Huh?

It seems from what I have read that a thread is not really something concrete,
like a process is. It is in fact just a concept. From what I understand of the
way this works, a processor executes some commands for a program (which has
been termed a /thread of execution/), then when it needs to switch to processing
for some other program for a bit, it stores the /state/ of the program it's
currently executing for somewhere (Thread Local Storage) and then starts
executing the other program's instructions. And back and forth. Such that, a
thread is really just a concept for "one of the paths of execution" of a
program that is currently running.

Unlike a process, which really is something - it is a conglomeration of
resources, etc.

As an example of a definition that didn't really help me much ...

From Wikipedia:

#+begin_quote
"A thread in computer science is short for a thread of execution. Threads are
a way for a program to divide (termed "split") itself into two or more
simultaneously (or pseudo-simultaneously) running tasks. Threads and processes
differ from one operating system to another but, in general, a thread is
contained inside a process and different threads in the same process share
same resources while different processes in the same multitasking operating
system do not."
#+end_quote

So am I right? Wrong? What is a thread really?

*Edit*: Apparently a thread is also given its own call stack, so that is
 somewhat of a concrete /thing/.

> "Process" is no less of an abstract term.

> The answers below are ... abstract. In simpler terms (and glossing over some
  details): once upon a time, a computer program could only do one thing at
  once. So it did A, then after that B, then C, then ... .In modern systems,
  this isn't ideal; for example you want to keep browsing the web while
  downloading a file. So programs now have one or more 'threads'. Each
  'thread' can only do one thing at once, but /different threads can do things
  simultaneously/. Thread 1 can do A, then B, then C; thread 2 can do X, then
  Y, then Z. B can't start until A has finished, but A and X /can/ happen at
  once.
---
> A thread is an execution context, which is all the information a CPU needs
  to execute a stream of instructions.

Suppose you're reading a book, and you want to take a break right now, but you
want to be able to come back and resume reading from the exact point where you
stopped. One way to achieve that is by jotting down the page number, line
number, and word number. So your execution context for reading a book is these
3 numbers.

If you have a roommate, and she's using the same technique, she can take the
book while you're not using it, and resume reading from where she
stopped. Then you can take it back, and resume it from where you were.

Threads work in the same way. A CPU is giving you the illusion that it's doing
multiple computations at the same time. It does that by spending a bit of time
on each computation. It can do that because it has an execution context for
each computation. Just like you can share a book with your friend, many tasks
can share a CPU.

On a more technical level, an execution context (therefore a thread) consists
of the values of the CPU's registers.

Last: threads are different from processes. A thread is a context of
execution, while a process is a bunch of resources associated with a
computation. A process can have one or many threads.

Clarification: the resources associated with a process include memory pages
(all the threads in a process have the same view of the memory), file
descriptors (e.g., open sockets), and security credentials (e.g., the ID of
the user who started the process).
---
> A better analogy would equate person with CPU (both /do/ something), and
equate book with address-space (both just exist). That way, bookmarks in
different books are like threads in different processes. A single book with
more than one bookmark would be the analogy of a multi-threaded process, which
is what people usually mean when they say "threads". It works for a single
processor machine, but it breaks down somewhat when you talk about
multi-processing. Nobody cares which CPU executes function f(), but it /does/
matter which person reads chapter 11.
---
> A thread is an independent set of values for the processor registers (for a
single core). Since this includes the Instruction Pointer (aka Program
Counter), it controls what executes in what order. It also includes the Stack
Pointer, which had better point to a unique area of memory for each thread or
else they will interfere with each other.

Threads are the software unit affected by control flow (function call, loop,
goto), because those instructions operate on the Instruction Pointer, and that
belongs to a particular thread. Threads are often scheduled according to some
priorization scheme (although it's possible to design a system with one thread
per processor core, in which case every thread is always running and no
scheduling is needed).

In fact the value of the Instruction Pointer and the instruction stored at
that location is sufficient to determine a new value for the Instruction
Pointer. For most instructions, this simply advances the IP by the size of the
instruction, but control flow instructions change the IP in other, predictable
ways. The sequence of values the IP takes on forms a path of execution weaving
through the program code, giving rise to the name "thread".

> +1. A thread isn't anything more "concrete" than a set of register values.

> What "set of values"? What are they? How do they define a /thread/?

> The exact list of CPU registers depends on the architecture, but instruction
  pointer and stack pointer are pretty much universal. They define a thread
  insofar as when this thread (set of register values) is loaded in the
  processor core, the thread is /running/. The processor is fetching
  instructions demanded by the thread and updating the thread registers. When
  a context switch is needed, the processor saves this set of register values
  into memory and loads a set belonging to a different thread, typically as
  part of the interrupt servicing logic.

> Google-fu (for u): 

Instruction Pointer -> is a register that holds the
  memory address of the instruction to be executed next. The CPU is hard-wired
  to read the instruction pointer and execute the instruction at that
  particular address. 

Processor Register -> The registers are the places where the value that the
CPU is actually working on are located (e.g. variable values). 

Stack Pointer -> is a small register that stores the address of the last
program request in a stack.

> During parallel execution of threads and processes, which instruction does
  the instruction pointer to?

> A single processor core doesn't do parallel execution, it does
  timeslicing. On a multicore system (parallel processing), you can't use the
  definite article "the" to talk about registers like the instruction pointer,
  because there are many copies, one in each CPU core. (Note that all
  multisocket systems are also multicore even if you don't have 'multicore
  processor' units installed in the sockets, because the one core per socket
  still results in multiple cores in the system).

> With HyperThreading, "core" is often used to mean a pair of closely-coupled
  cores with share compute resources, but each of these two still has its own
  set of registers and control logic... for the purpose of this answer
  "processor core" means each hardware threading unit, regardless of whether
  it has shared or dedicated compute associated.

> A "set of values for the processor registers" is not a thread. That's a
  thread /context/. It's part of a thread, but no more so than all the variables
  that are exclusively used by the thread (including its entire stack) or, the
  kernel variables that describe the thread. A computer scientist would say
  that a "thread of execution" is a particular sequence of operations - one
  that is "threaded" through your program's code. I tell noobs that a thread
  is like an /agent/ that carries out your instructions and, that you can have
  more than one such agent working for you at the same time.

> A thread context is what makes a thread a thread. All the other associated
  things are supplementary, not definitional.

[[https://stackoverflow.com/questions/5201852/what-is-a-thread-really]]
